json1<-content(homeTL)
json2<-jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json1<-content(homeTL)
json2<-jsonlite::fromJSON(toJSON(json1))
json2
head(json2)
json2[1,1:3]
json1
json1[1,1:2]
str(json1)
json2<-jsonlite::fromJSON(homeTL)
read.dta(Stata)
url='http://biostat.jhsph.edu/~jleek/contact.html'
con<-url(url)
html<-readLines(con)
close(con)
nchar(html)
url=con('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
url=url('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
url
read.fwf
read.fwf(url)
help(read.fwf)
read.fwf(url,8)
x<-read.fwf(url,8)
x<-read.fwf(url,8)
con<-url('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
x<-read.fwf(url,8)
str(x)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', destfile = 'fixed.for')
x<-read.fwf('fixed.for',8)
x
str(x)
x<-read.fwf('fixed.for',c(9,8,8,8,8))
x
str(x)
x<-read.fwf('fixed.for',c(10,9,9,9,9))
str(x)
x
sum(x[,c(4,9)])
str(x)
x[,4]
sum(x[,4])
sum(x[4,9])
x[4,9]
str(x)
x<-read.fwf('fixed.for',c(10,4,3,4,3,4,3))
str(x)
x
head(x)
x<-read.fwf('fixed.for',c(10,5,4,5,4,5,4))
head(x)
x<-read.fwf('fixed.for',c(10,5,4,5,4,5,4), sep = c(' ','-'))
x<-read.fwf('fixed.for',c(11,5,4,5,4,5,4))
head(x)
x<-read.fwf('fixed.for',c(10,5,4,5,4,5,4))
head(x)
x<-read.fwf('fixed.for',c(10,5,4,5,4,5,4),skip=3)
head(x)
x<-read.fwf('fixed.for',skip=3)
x<-read.fwf('fixed.for',width=c(10,4,3,4,3,4,3),skip=3)
head(x)
x<-read.fwf('fixed.for',width=c(10,4,3,4,3,4,3),skip=3,sep='-')
x<-read.fwf('fixed.for',width=c(10,4,3,4,3,4,3),skip=3,sep=' ')
x<-read.fwf('fixed.for',width=c(10,4,3,4,3,4,3),skip=3,)
head(x)
x<-read.fwf('fixed.for',width=c(10,4,3,4,3,4,3),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(11,4,3,4,3,4,3),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(9,4,3,4,3,4,3),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,5,3,4,3,4,3),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,5,5,4,3,4,3),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,5,4,4,3,4,3),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,5,4,1,5,4,1,5,4,1),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,5,4,1),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,5,4,1,3),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,5,4,1,3,5),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,5,4,1,3,5,4,1,3,5,4,1,3,5),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,5,4,1,3,5,4,1,3,5,4,1,3,5,4,1,3,5),skip=5)
head(x)
sum(x[,7])
x<-read.fwf('fixed.for',width=c(10,5,4,4,5,4,4,5,4,4,5,4,4,5),skip=5)
head(x)
sum(x[,6])
sum(x[,7])
x
head(x)
x<-read.fwf('fixed.for',width=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),skip=5)
head(x)
sum(x[,4])
x<-read.fwf('fixed.for',widths = c(15, 4, 1, 3, 5, 4), header = FALSE, sep = "\t", skip = 4)
head(x)
sum(x[,6])
x<-read.fwf('fixed.for',width=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),skip=5)
head(x)
x<-read.fwf('fixed.for',width=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),skip=4)
head(x)
sum(x[,4])
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "7822d881456082ebe328",
secret = "7c120aa21ebefaa11e5ca36dbd54bd65b810cedb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "7822d881456082ebe328",
secret = "7c120aa21ebefaa11e5ca36dbd54bd65b810cedb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "7822d881456082ebe328",
secret = "7c120aa21ebefaa11e5ca36dbd54bd65b810cedb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "7822d881456082ebe328",
secret = "69f6e01172460d6b269f0bf22c2653f298cd7f75")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "7822d881456082ebe328",
secret = "69f6e01172460d6b269f0bf22c2653f298cd7f75")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req
attributes(req)
req$date
req$times
req$headers
req
attributes(req)
req$content
summary(req)
req$all_headers
req$cookies
req$request
head(req)
content(req)
grep('^created',content(req))
grep('created',content(req))
x<-content req
x<-content(req)
x
str(x)
x$repo
x[[1]]
x[[1]]$repo_name
x[[1]]$name
repos <- content(req)
# 5. Find datasharing
for (repo in repos){
if (repo$name=='datasharing') print(repo$create_at)
}
x[[1]]$created_at
repos <- content(req)
# 5. Find datasharing
for (repo in repos){
if (repo$name=='datasharing') print(repo[[create_at]])
}
for (repo in repos){
if (repo$name=='datasharing') print(repo$create_at)
}
for (repo in repos){
if (repo$name=='datasharing') x<-repo
}
repo
repo$name
for (repo in repos){
if (repo$name == "datasharing") x<-repo
break
}
repo$name
for (repo in repos){
if (repo$name == "datasharing") x<-repo
break
}
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "7822d881456082ebe328",
secret = "69f6e01172460d6b269f0bf22c2653f298cd7f75")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
repos <- content(req)
# 5. Find datasharing
for (repo in repos){
if (repo$name == "datasharing") x<-repo
break
}
repo
repo$name
repos <- content(req)
# 5. Find datasharing
for (repo in repos){
if (repo$name == "datasharing") {
x<-repo
break}
}
repo$name
for (repo in repos){
if (repo$name == "datasharing") {
print(repo$created_at)
}
}
library(lattice)
stripplot(mtcars$wt)
bw(mtcars$wt)
bwplot(mtcars$wt)
dotplot(mtcars$wt)
str(mtcars)
xyplot(mpg~wt | am*vs, data=mtcars)
xyplot(mpg~wt | am, data=mtcars)
xyplot(mtcars)
xyplot(data=mtcars)
help(xyplot)
plot(mtcars)
mpg
library(ggplot2)
str(mpg)
qplot(displ,hwy, data=mpg)
qplot(displ,hwy,data=mpg, facets=.~drv)
qplot(displ,hwy,data=mpg, facets=drv~.)
qplot(displ,hwy,data=mpg, facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg, facets=drv~. , binwidth=2)
qplot(displ,data=mpg, facets=drv~. , binwidth=2)
str(maacs)
qplot(displ,data=mpg,color,fill=drv)
qplot(displ,data=mpg,color,fill=drv)qplot(displ,data=mpg,fill=drv)
qplot(displ,data=mpg,fill=drv)
qplot(displ,data=mpg,color=drv,geom='density')
qplot(displ,hwy,data=mpg, facets=.~drv)
qplot(displ,hwy,data=mpg, facets=.~drv, geom=c('points','smooth'),method='lm')
qplot(displ,hwy,data=mpg, facets=.~drv, geom=c('point','smooth'),method='lm')
qplot(displ,hwy,data=mpg, facets=.~drv, geom=c('point','smooth'))
qplot(displ,hwy,data=mpg, facets=.~drv, geom=c('point','smooth'), method='lm')
qplot(displ,hwy,data=mpg, facets=.~drv, geom=c('point','lm'))
help(qplot)
qplot(displ,hwy,data=mpg, facets=.~drv, geom=c('point','smooth(method='lm')))
qplot(displ,hwy,data=mpg, facets=.~drv, geom=c('point','smooth(method='lm')'))
qplot(displ,hwy,data=mpg, facets=.~drv, geom=c('point','smooth(method='lm')')
g
g <- ggplot(mtcars, aes(y=mpg,x=wt))
g
g <- g+geom_point()
#get lm line
g<- g+geom_smooth(method='lm')
g
str(mtcars)
g<-g+facet_grid(.~gear)
g
g <- g+geom_point(aes(color=qsec),size=2,alpha=2)
g
g <- ggplot(mtcars, aes(y=mpg,x=wt))
#get points on
g <- g+geom_point(aes(color=qsec),size=2,alpha=2)
g
g <- ggplot(mtcars, aes(y=mpg,x=wt))
#get points on
g <- g+geom_point(aes(color=qsec),size=2,alpha=1)
g
g <- g+geom_point(aes(color=qsec),size=4,alpha=1)
g
g <- g+geom_point(aes(color=qsec),size=4,alpha=1/2)
g
g <- g+geom_point(color='steelblue')
g
g <- ggplot(mtcars, aes(y=mpg,x=wt))
g <- g+geom_point(color='steelblue')
g
g<-g+labs(x='xlab',y='ylab',title='title')
g
g<- g+geom_smooth(method='lm', lty=3, se=TRUE)
g
g<-g+theme_gray()
g
#ggplot2
library(ggplot2)
#facets
qplot(displ,hwy,data=mpg, facets=.~drv)
qplot(displ,data=mpg, facets=drv~. , binwidth=2)
#color
qplot(displ,data=mpg,fill=drv)
qplot(displ,data=mpg,color=drv,geom='density')
#line smoothing method
qplot(displ,hwy,data=mpg, facets=.~drv, geom=c('point','smooth'))
#step by step
#create plot
g <- ggplot(mtcars, aes(y=mpg,x=wt))
#get points on
#alpha is transparency
g <- g+geom_point(aes(color=qsec),size=4,alpha=1/2)
#g <- g+geom_point(color='steelblue')
#get lm line
g<- g+geom_smooth(method='lm', lty=3, se=TRUE)
#facet
g<-g+facet_grid(.~gear)
#labels
g<-g+labs(x='xlab',y='ylab',title='title')
#theme
#g<-g+theme_bw()
g<-g+theme_gray()
g<-g+theme_bw()
g
g<-g+coord_cartesian(ylim=c(20,30))
g
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
x<- xyplot(weight ~Time | Diet, BodyWeight)
help(llines)
llines(c('a','b','b'))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
data(movies)
library(ggplot2)
library(ggplot2movies)
data(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("~/projects/ExData_Final")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
SCC
SCC$Data.Category
unique(SCC$EI.Sector)
unique(SCC$Short.Name)
grep('Motor',SCC$Short.Name)
i<-grep('Motor',SCC$Short.Name)
index <-SCC[i,]$SCC
SCC[i,]$Short.Name
j
j<-grep('Motor',SCC$Short.Name,ignore.case = TRUE)
i==j
i<-grep('Motor',SCC$Short.Name,ignore.case = TRUE)
index <-SCC[i,]$SCC
#Aggregate and name columns
motorem <-aggregate(NEI$Emissions,by=list(NEI$year, NEI$SCC %in% index),sum)
names(motorem) <-c('year','Motor','Emissions')
motorem<-motorem[motorem$Motor==TRUE,]
motorem
#Plot
library(ggplot2)
qplot(year,Emissions,data=motorem, geom=c('line'), main='Emission from Motor-related Sources 1999-2008')
#Save
ggsave(file="plot5.png", dpi=72)
motorem <-aggregate(NEI$Emissions,
by=list(NEI$year, NEI$SCC %in% index,NEI$fips=='24510'),sum)
motorem
names(motorem) <-c('year','Motor','Bal','Emissions')
motorem<-motorem[motorem$Motor==TRUE & motorem$Bal==TRUE,]
motorem
library(ggplot2)
qplot(year,Emissions,data=motorem, geom=c('line'), main='Emission from Motor-related Sources 1999-2008')
#Save
ggsave(file="plot5.png", dpi=72)
motorem <-aggregate(NEI$Emissions,
by=list(NEI$year, NEI$SCC %in% index,NEI$fips),sum)
motorem
head(motorem)
names(motorem) <-c('year','Motor','fips','Emissions')
motorem<-motorem[motorem$Motor==TRUE &
(motorem$fips=='24510'|motorem$fips=='06037'),]
motorem
qplot(year,Emissions,data=motorem, geom=c('line'),
main='Emission from Motor-related Sources 1999-2008'
color=fips)
qplot(year,Emissions,data=motorem, geom=c('line'),
main='Emission from Motor-related Sources 1999-2008',
color=fips)
motorem$city <-ifelse(motorem$fips=='24510','Baltimore City','LA County')
motorem
library(ggplot2)
qplot(year,Emissions,data=motorem, geom=c('line'),
main='Emission from Motor-related Sources 1999-2008',
color=city)
qplot(year,Emissions,data=motorem, geom=c('line'),
main='Emission from Motor-related Sources 1999-2008',
color=city)
#Save
ggsave(file="plot6.png", dpi=72)
qplot(year,Emissions,data=motorem, geom=c('line'),
main='Emission from Motor-related Sources 1999-2008',sub='Baltimore City vs LA County',
color=city)
library(ggplot2)
qplot(year,Emissions,data=motorem, geom=c('line'),
main='Emission from Motor-related Sources 1999-2008',
color=city)
#Get SCC for coal-related combustions
i<-grep('Motor',SCC$Short.Name,ignore.case = TRUE)
index <-SCC[i,]$SCC
#Aggregate and name columns
motorem <-aggregate(NEI$Emissions,
by=list(NEI$year, NEI$SCC %in% index,NEI$fips=='24510'),sum)
names(motorem) <-c('year','Motor','Bal','Emissions')
motorem<-motorem[motorem$Motor==TRUE & motorem$Bal==TRUE,]
#Plot
library(ggplot2)
qplot(year,Emissions,data=motorem, geom=c('line'),
main='Emission from Motor-related Sources 1999-2008 in Baltimore City')
#Save
ggsave(file="plot5.png", dpi=72)
